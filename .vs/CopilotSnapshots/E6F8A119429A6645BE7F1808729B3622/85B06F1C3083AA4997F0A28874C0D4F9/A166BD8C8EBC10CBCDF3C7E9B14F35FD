using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Miski.Application.Features.Maestros.TipoDocumento.Commands.CreateTipoDocumento;
using Miski.Application.Features.Maestros.TipoDocumento.Commands.UpdateTipoDocumento;
using Miski.Application.Features.Maestros.TipoDocumento.Commands.DeleteTipoDocumento;
using Miski.Application.Features.Maestros.TipoDocumento.Queries.GetTipoDocumento;
using Miski.Application.Features.Maestros.TipoDocumento.Queries.GetTipoDocumentoById;
using Miski.Shared.DTOs.Base;
using Miski.Shared.DTOs.Maestros;

namespace Miski.Api.Controllers.Maestros;

[ApiController]
[Route("api/maestros/tipo-documento")]
[Tags("Maestros")]
[Authorize]
public class TipoDocumentoController : ControllerBase
{
    private readonly IMediator _mediator;

    public TipoDocumentoController(IMediator mediator)
    {
        _mediator = mediator;
    }

    /// <summary>
    /// Obtiene todos los tipos de documento
    /// </summary>
    /// <remarks>
    /// Permite filtrar por:
    /// - nombre: Búsqueda parcial por nombre del tipo de documento
    /// </remarks>
    [HttpGet]
    public async Task<ActionResult<ApiResponse<IEnumerable<TipoDocumentoDto>>>> GetTipoDocumentos(
        [FromQuery] string? nombre = null,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var query = new GetTipoDocumentoQuery(nombre);
            var result = await _mediator.Send(query, cancellationToken);
            
            return Ok(ApiResponse<IEnumerable<TipoDocumentoDto>>.SuccessResult(
                result,
                "Tipos de documento obtenidos exitosamente"
            ));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<IEnumerable<TipoDocumentoDto>>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Obtiene un tipo de documento por ID
    /// </summary>
    [HttpGet("{id}")]
    public async Task<ActionResult<ApiResponse<TipoDocumentoDto>>> GetTipoDocumentoById(
        int id,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var query = new GetTipoDocumentoByIdQuery(id);
            var result = await _mediator.Send(query, cancellationToken);

            return Ok(ApiResponse<TipoDocumentoDto>.SuccessResult(
                result,
                "Tipo de documento obtenido exitosamente"
            ));
        }
        catch (Shared.Exceptions.NotFoundException ex)
        {
            return NotFound(ApiResponse<TipoDocumentoDto>.ErrorResult(
                "Tipo de documento no encontrado",
                ex.Message
            ));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<TipoDocumentoDto>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Crea un nuevo tipo de documento
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<ApiResponse<TipoDocumentoDto>>> CreateTipoDocumento(
        [FromBody] CreateTipoDocumentoDto request,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var command = new CreateTipoDocumentoCommand(request);
            var result = await _mediator.Send(command, cancellationToken);

            return CreatedAtAction(
                nameof(GetTipoDocumentoById),
                new { id = result.IdTipoDocumento },
                ApiResponse<TipoDocumentoDto>.SuccessResult(
                    result,
                    "Tipo de documento creado exitosamente"
                )
            );
        }
        catch (Shared.Exceptions.ValidationException ex)
        {
            return BadRequest(ApiResponse<TipoDocumentoDto>.ValidationErrorResult(ex.Errors));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<TipoDocumentoDto>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Actualiza un tipo de documento
    /// </summary>
    [HttpPut("{id}")]
    public async Task<ActionResult<ApiResponse<TipoDocumentoDto>>> UpdateTipoDocumento(
        int id,
        [FromBody] UpdateTipoDocumentoDto request,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var command = new UpdateTipoDocumentoCommand(id, request);
            var result = await _mediator.Send(command, cancellationToken);

            return Ok(ApiResponse<TipoDocumentoDto>.SuccessResult(
                result,
                "Tipo de documento actualizado exitosamente"
            ));
        }
        catch (Shared.Exceptions.NotFoundException ex)
        {
            return NotFound(ApiResponse<TipoDocumentoDto>.ErrorResult(
                "Tipo de documento no encontrado",
                ex.Message
            ));
        }
        catch (Shared.Exceptions.ValidationException ex)
        {
            return BadRequest(ApiResponse<TipoDocumentoDto>.ValidationErrorResult(ex.Errors));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<TipoDocumentoDto>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Elimina un tipo de documento
    /// </summary>
    /// <remarks>
    /// NOTA: No se puede eliminar un tipo de documento que está siendo utilizado por personas.
    /// </remarks>
    [HttpDelete("{id}")]
    public async Task<ActionResult<ApiResponse>> DeleteTipoDocumento(
        int id,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var command = new DeleteTipoDocumentoCommand(id);
            await _mediator.Send(command, cancellationToken);

            return Ok(ApiResponse.SuccessResult("Tipo de documento eliminado exitosamente"));
        }
        catch (Shared.Exceptions.NotFoundException ex)
        {
            return NotFound(ApiResponse.ErrorResult(
                "Tipo de documento no encontrado",
                ex.Message
            ));
        }
        catch (Shared.Exceptions.ValidationException ex)
        {
            return BadRequest(ApiResponse.ValidationErrorResult(ex.Errors));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }
}