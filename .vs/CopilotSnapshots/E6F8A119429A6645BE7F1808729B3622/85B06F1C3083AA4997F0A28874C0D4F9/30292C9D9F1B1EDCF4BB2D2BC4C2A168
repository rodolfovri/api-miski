using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Maestros;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Maestros.TipoDocumento.Queries.GetTipoDocumentoById;

public class GetTipoDocumentoByIdHandler : IRequestHandler<GetTipoDocumentoByIdQuery, TipoDocumentoDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetTipoDocumentoByIdHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<TipoDocumentoDto> Handle(GetTipoDocumentoByIdQuery request, CancellationToken cancellationToken)
    {
        var tipoDocumento = await _unitOfWork.Repository<Domain.Entities.TipoDocumento>()
            .GetByIdAsync(request.Id, cancellationToken);

        if (tipoDocumento == null)
            throw new NotFoundException("TipoDocumento", request.Id);

        return _mapper.Map<TipoDocumentoDto>(tipoDocumento);
    }
}