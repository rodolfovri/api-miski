using MediatR;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.LlegadasPlanta.Queries.GetLlegadaPlantaById;

public class GetLlegadaPlantaByIdHandler : IRequestHandler<GetLlegadaPlantaByIdQuery, LlegadaPlantaDto>
{
    private readonly IUnitOfWork _unitOfWork;

    public GetLlegadaPlantaByIdHandler(IUnitOfWork unitOfWork)
    {
        _unitOfWork = unitOfWork;
    }

    public async Task<LlegadaPlantaDto> Handle(GetLlegadaPlantaByIdQuery request, CancellationToken cancellationToken)
    {
        // Obtener la llegada a planta
        var llegadaPlanta = await _unitOfWork.Repository<LlegadaPlanta>()
            .GetByIdAsync(request.Id, cancellationToken);

        if (llegadaPlanta == null)
            throw new NotFoundException("LlegadaPlanta", request.Id);

        // Cargar la compra
        var compra = await _unitOfWork.Repository<Compra>()
            .GetByIdAsync(llegadaPlanta.IdCompra, cancellationToken);

        // Cargar el usuario
        var usuario = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(llegadaPlanta.IdUsuario, cancellationToken);

        // Cargar el lote
        var lote = await _unitOfWork.Repository<Lote>()
            .GetByIdAsync(llegadaPlanta.IdLote, cancellationToken);

        // Calcular diferencias
        int diferenciaSacos = 0;
        decimal diferenciaPeso = 0;

        if (lote != null)
        {
            diferenciaSacos = lote.Sacos - (int)llegadaPlanta.SacosRecibidos;
            diferenciaPeso = lote.Peso - (decimal)llegadaPlanta.PesoRecibido;
        }

        // Crear el DTO de respuesta
        var resultado = new LlegadaPlantaDto
        {
            IdLlegadaPlanta = llegadaPlanta.IdLlegadaPlanta,
            IdCompra = llegadaPlanta.IdCompra,
            IdUsuario = llegadaPlanta.IdUsuario,
            IdLote = llegadaPlanta.IdLote,
            SacosRecibidos = (decimal)llegadaPlanta.SacosRecibidos,
            PesoRecibido = (decimal)llegadaPlanta.PesoRecibido,
            FLlegada = llegadaPlanta.FLlegada,
            Observaciones = llegadaPlanta.Observaciones,
            Estado = llegadaPlanta.Estado,
            CompraSerie = compra?.Serie,
            UsuarioNombre = usuario != null ? $"{usuario.Nombres} {usuario.Apellidos}" : null,
            LoteCodigo = lote?.Codigo,
            SacosAsignados = lote?.Sacos ?? 0,
            PesoAsignado = lote?.Peso ?? 0,
            DiferenciaSacos = diferenciaSacos,
            DiferenciaPeso = diferenciaPeso
        };

        return resultado;
    }
}
