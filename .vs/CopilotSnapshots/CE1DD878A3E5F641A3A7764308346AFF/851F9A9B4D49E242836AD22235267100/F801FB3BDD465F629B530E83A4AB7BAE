using MediatR;
using FluentValidation;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.LlegadasPlanta.Commands.CreateLlegadaPlanta;

public class CreateLlegadaPlantaHandler : IRequestHandler<CreateLlegadaPlantaCommand, LlegadaPlantaDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IValidator<CreateLlegadaPlantaDto> _validator;

    public CreateLlegadaPlantaHandler(IUnitOfWork unitOfWork, IValidator<CreateLlegadaPlantaDto> validator)
    {
        _unitOfWork = unitOfWork;
        _validator = validator;
    }

    public async Task<LlegadaPlantaDto> Handle(CreateLlegadaPlantaCommand request, CancellationToken cancellationToken)
    {
        // Validar el DTO
        var validationResult = await _validator.ValidateAsync(request.Data, cancellationToken);
        if (!validationResult.IsValid)
        {
            var errors = validationResult.Errors
                .GroupBy(e => e.PropertyName)
                .ToDictionary(g => g.Key, g => g.Select(e => e.ErrorMessage).ToArray());
            throw new Shared.Exceptions.ValidationException(errors);
        }

        // Verificar que la compra existe
        var compra = await _unitOfWork.Repository<Compra>()
            .GetByIdAsync(request.Data.IdCompra, cancellationToken);

        if (compra == null)
            throw new NotFoundException("Compra", request.Data.IdCompra);

        // Verificar que el usuario existe
        var usuario = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(request.Data.IdUsuario, cancellationToken);

        if (usuario == null)
            throw new NotFoundException("Usuario", request.Data.IdUsuario);

        // Verificar que todos los lotes existen y pertenecen a la compra
        var todosLosLotes = await _unitOfWork.Repository<Lote>().GetAllAsync(cancellationToken);
        var idsLotes = request.Data.Detalles.Select(d => d.IdLote).ToList();

        foreach (var idLote in idsLotes)
        {
            var lote = todosLosLotes.FirstOrDefault(l => l.IdLote == idLote);
            if (lote == null)
                throw new NotFoundException("Lote", idLote);

            if (lote.IdCompra != request.Data.IdCompra)
            {
                var errors = new Dictionary<string, string[]>
                {
                    { "Lote", new[] { $"El lote con ID {idLote} no pertenece a la compra especificada" } }
                };
                throw new Shared.Exceptions.ValidationException(errors);
            }
        }

        // Verificar que no haya duplicados en los lotes
        var lotesUnicos = idsLotes.Distinct().ToList();
        if (lotesUnicos.Count != idsLotes.Count)
        {
            var errors = new Dictionary<string, string[]>
            {
                { "Detalles", new[] { "No se pueden registrar lotes duplicados en una misma llegada" } }
            };
            throw new Shared.Exceptions.ValidationException(errors);
        }

        // Crear la llegada a planta
        var llegadaPlanta = new LlegadaPlanta
        {
            IdCompra = request.Data.IdCompra,
            IdUsuario = request.Data.IdUsuario,
            FLlegada = request.Data.FLlegada,
            Observaciones = request.Data.Observaciones,
            Estado = "REGISTRADO"
        };

        await _unitOfWork.Repository<LlegadaPlanta>().AddAsync(llegadaPlanta, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Crear los detalles
        var detalles = new List<LlegadaPlantaDetalle>();

        foreach (var detalleDto in request.Data.Detalles)
        {
            var detalle = new LlegadaPlantaDetalle
            {
                IdLlegadaPlanta = llegadaPlanta.IdLlegadaPlanta,
                IdLote = detalleDto.IdLote,
                SacosRecibidos = detalleDto.SacosRecibidos,
                PesoRecibido = detalleDto.PesoRecibido,
                Observaciones = detalleDto.Observaciones
            };

            await _unitOfWork.Repository<LlegadaPlantaDetalle>().AddAsync(detalle, cancellationToken);
            detalles.Add(detalle);
        }

        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Construir el DTO de respuesta
        var detallesDto = new List<LlegadaPlantaDetalleDto>();

        foreach (var detalle in detalles)
        {
            var lote = todosLosLotes.FirstOrDefault(l => l.IdLote == detalle.IdLote);
            
            if (lote != null)
            {
                detallesDto.Add(new LlegadaPlantaDetalleDto
                {
                    IdLlegadaDetalle = detalle.IdLlegadaDetalle,
                    IdLlegadaPlanta = detalle.IdLlegadaPlanta,
                    IdLote = detalle.IdLote,
                    SacosRecibidos = detalle.SacosRecibidos,
                    PesoRecibido = detalle.PesoRecibido,
                    Observaciones = detalle.Observaciones,
                    LoteCodigo = lote.Codigo,
                    SacosAsignados = lote.Sacos,
                    PesoAsignado = lote.Peso,
                    DiferenciaSacos = lote.Sacos - detalle.SacosRecibidos,
                    DiferenciaPeso = lote.Peso - detalle.PesoRecibido
                });
            }
        }

        var resultado = new LlegadaPlantaDto
        {
            IdLlegadaPlanta = llegadaPlanta.IdLlegadaPlanta,
            IdCompra = llegadaPlanta.IdCompra,
            IdUsuario = llegadaPlanta.IdUsuario,
            FLlegada = llegadaPlanta.FLlegada,
            Observaciones = llegadaPlanta.Observaciones,
            Estado = llegadaPlanta.Estado,
            CompraSerie = compra.Serie,
            UsuarioNombre = $"{usuario.Nombres} {usuario.Apellidos}",
            Detalles = detallesDto
        };

        return resultado;
    }
}
