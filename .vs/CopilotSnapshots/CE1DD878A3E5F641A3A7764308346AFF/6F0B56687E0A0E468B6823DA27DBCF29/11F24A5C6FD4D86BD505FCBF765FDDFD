using MediatR;
using FluentValidation;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.LlegadasPlanta.Commands.CreateLlegadaPlanta;

public class CreateLlegadaPlantaHandler : IRequestHandler<CreateLlegadaPlantaCommand, LlegadaPlantaDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IValidator<CreateLlegadaPlantaDto> _validator;

    public CreateLlegadaPlantaHandler(IUnitOfWork unitOfWork, IValidator<CreateLlegadaPlantaDto> validator)
    {
        _unitOfWork = unitOfWork;
        _validator = validator;
    }

    public async Task<LlegadaPlantaDto> Handle(CreateLlegadaPlantaCommand request, CancellationToken cancellationToken)
    {
        // Validar el DTO
        var validationResult = await _validator.ValidateAsync(request.Data, cancellationToken);
        if (!validationResult.IsValid)
        {
            var errors = validationResult.Errors
                .GroupBy(e => e.PropertyName)
                .ToDictionary(g => g.Key, g => g.Select(e => e.ErrorMessage).ToArray());
            throw new Shared.Exceptions.ValidationException(errors);
        }

        // Verificar que la compra existe
        var compra = await _unitOfWork.Repository<Compra>()
            .GetByIdAsync(request.Data.IdCompra, cancellationToken);

        if (compra == null)
            throw new NotFoundException("Compra", request.Data.IdCompra);

        // Verificar que el usuario existe
        var usuario = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(request.Data.IdUsuario, cancellationToken);

        if (usuario == null)
            throw new NotFoundException("Usuario", request.Data.IdUsuario);

        // Verificar que el lote existe y pertenece a la compra
        var lote = await _unitOfWork.Repository<Lote>()
            .GetByIdAsync(request.Data.IdLote, cancellationToken);

        if (lote == null)
            throw new NotFoundException("Lote", request.Data.IdLote);

        if (lote.IdCompra != request.Data.IdCompra)
        {
            var errors = new Dictionary<string, string[]>
            {
                { "Lote", new[] { $"El lote con ID {request.Data.IdLote} no pertenece a la compra especificada" } }
            };
            throw new Shared.Exceptions.ValidationException(errors);
        }

        // Verificar que el lote no haya sido registrado previamente
        var llegadasExistentes = await _unitOfWork.Repository<LlegadaPlanta>()
            .GetAllAsync(cancellationToken);

        var loteYaRegistrado = llegadasExistentes.Any(lp => lp.IdLote == request.Data.IdLote);
        
        if (loteYaRegistrado)
        {
            var errors = new Dictionary<string, string[]>
            {
                { "Lote", new[] { $"El lote con ID {request.Data.IdLote} ya ha sido registrado en una llegada a planta" } }
            };
            throw new Shared.Exceptions.ValidationException(errors);
        }

        // Crear la llegada a planta
        var llegadaPlanta = new LlegadaPlanta
        {
            IdCompra = request.Data.IdCompra,
            IdUsuario = request.Data.IdUsuario,
            IdLote = request.Data.IdLote,
            SacosRecibidos = (double)request.Data.SacosRecibidos,
            PesoRecibido = (double)request.Data.PesoRecibido,
            FLlegada = request.Data.FLlegada,
            Observaciones = request.Data.Observaciones,
            Estado = "REGISTRADO"
        };

        await _unitOfWork.Repository<LlegadaPlanta>().AddAsync(llegadaPlanta, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Calcular diferencias
        int diferenciaSacos = lote.Sacos - (int)llegadaPlanta.SacosRecibidos;
        decimal diferenciaPeso = lote.Peso - (decimal)llegadaPlanta.PesoRecibido;

        // Construir el DTO de respuesta
        var resultado = new LlegadaPlantaDto
        {
            IdLlegadaPlanta = llegadaPlanta.IdLlegadaPlanta,
            IdCompra = llegadaPlanta.IdCompra,
            IdUsuario = llegadaPlanta.IdUsuario,
            IdLote = llegadaPlanta.IdLote,
            SacosRecibidos = (decimal)llegadaPlanta.SacosRecibidos,
            PesoRecibido = (decimal)llegadaPlanta.PesoRecibido,
            FLlegada = llegadaPlanta.FLlegada,
            Observaciones = llegadaPlanta.Observaciones,
            Estado = llegadaPlanta.Estado,
            CompraSerie = compra.Serie,
            UsuarioNombre = $"{usuario.Nombres} {usuario.Apellidos}",
            LoteCodigo = lote.Codigo,
            SacosAsignados = lote.Sacos,
            PesoAsignado = lote.Peso,
            DiferenciaSacos = diferenciaSacos,
            DiferenciaPeso = diferenciaPeso
        };

        return resultado;
    }
}
