using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Maestros;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Maestros.VariedadProducto.Queries.GetVariedadById;

public class GetVariedadProductoByIdHandler : IRequestHandler<GetVariedadProductoByIdQuery, VariedadProductoDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetVariedadProductoByIdHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<VariedadProductoDto> Handle(GetVariedadProductoByIdQuery request, CancellationToken cancellationToken)
    {
        var variedad = await _unitOfWork.Repository<Domain.Entities.VariedadProducto>()
            .GetByIdAsync(request.Id, cancellationToken);

        if (variedad == null)
            throw new NotFoundException("VariedadProducto", request.Id);

        // Cargar producto y unidad de medida
        var producto = await _unitOfWork.Repository<Producto>()
            .GetByIdAsync(variedad.IdProducto, cancellationToken);
        
        var unidadMedida = await _unitOfWork.Repository<Domain.Entities.UnidadMedida>()
            .GetByIdAsync(variedad.IdUnidadMedida, cancellationToken);

        variedad.Producto = producto ?? new Producto();
        variedad.UnidadMedida = unidadMedida ?? new Domain.Entities.UnidadMedida();

        return _mapper.Map<VariedadProductoDto>(variedad);
    }
}
