using AutoMapper;
using Miski.Domain.Entities;
using Miski.Shared.DTOs;
using Miski.Shared.DTOs.Auth;
using Miski.Shared.DTOs.Permisos;
using Miski.Shared.DTOs.Personas;
using Miski.Shared.DTOs.Maestros;
using Miski.Shared.DTOs.Ubicaciones;
using Miski.Shared.DTOs.Almacen;
using Miski.Shared.DTOs.Compras;

namespace Miski.Application.Mappings;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        CreateMap<Producto, ProductoDto>()
            .ForMember(dest => dest.Estado, opt => opt.MapFrom(src => src.Estado ?? "ACTIVO"));

        CreateMap<Persona, PersonaDto>()
            .ForMember(dest => dest.TipoDocumentoNombre, opt => opt.MapFrom(src => src.TipoDocumento.Nombre))
            .ForMember(dest => dest.NombreCompleto, opt => opt.MapFrom(src => $"{src.Nombres} {src.Apellidos}"));

        // Mapeos para Auth
        CreateMap<Persona, AuthPersonaDto>()
            .ForMember(dest => dest.TipoDocumentoNombre, opt => opt.MapFrom(src => 
                src.TipoDocumento != null ? src.TipoDocumento.Nombre : string.Empty))
            .ForMember(dest => dest.NombreCompleto, opt => opt.MapFrom(src => $"{src.Nombres} {src.Apellidos}"));

        CreateMap<Rol, RolDto>()
            .ForMember(dest => dest.TipoPlataforma, opt => opt.MapFrom(src => src.TipoPlataforma));

        CreateMap<Usuario, AuthResponseDto>()
            .ForMember(dest => dest.Token, opt => opt.Ignore())
            .ForMember(dest => dest.Expiration, opt => opt.Ignore())
            .ForMember(dest => dest.Roles, opt => opt.Ignore()); // Se manejará manualmente

        // Mapeos para Permisos
        CreateMap<Modulo, ModuloDto>();
        CreateMap<SubModulo, SubModuloDto>()
            .ForMember(dest => dest.ModuloNombre, opt => opt.MapFrom(src => src.Modulo.Nombre));
        CreateMap<SubModuloDetalle, SubModuloDetalleDto>()
            .ForMember(dest => dest.SubModuloNombre, opt => opt.MapFrom(src => src.SubModulo.Nombre));
        
        CreateMap<PermisoRol, PermisoRolDto>()
            .ForMember(dest => dest.RolNombre, opt => opt.MapFrom(src => src.Rol != null ? src.Rol.Nombre : null))
            .ForMember(dest => dest.ModuloNombre, opt => opt.MapFrom(src => src.Modulo != null ? src.Modulo.Nombre : null))
            .ForMember(dest => dest.SubModuloNombre, opt => opt.MapFrom(src => src.SubModulo != null ? src.SubModulo.Nombre : null))
            .ForMember(dest => dest.SubModuloDetalleNombre, opt => opt.MapFrom(src => src.SubModuloDetalle != null ? src.SubModuloDetalle.Nombre : null));

        // Mapeos para Personas
        CreateMap<Persona, Miski.Shared.DTOs.Personas.PersonaDto>()
            .ForMember(dest => dest.TipoDocumentoNombre, opt => opt.MapFrom(src => 
                src.TipoDocumento != null ? src.TipoDocumento.Nombre : string.Empty))
            .ForMember(dest => dest.NombreCompleto, opt => opt.MapFrom(src => $"{src.Nombres} {src.Apellidos}"))
            .ForMember(dest => dest.Categorias, opt => opt.Ignore()); // Se manejará manualmente si es necesario

        CreateMap<CategoriaPersona, CategoriaPersonaDto>();

        // Mapeos para Maestros - TipoDocumento
        CreateMap<TipoDocumento, TipoDocumentoDto>();

        // Mapeos para Maestros - UnidadMedida
        CreateMap<UnidadMedida, UnidadMedidaDto>();

        // Mapeos para Maestros - CategoriaProducto
        CreateMap<CategoriaProducto, CategoriaProductoDto>();

        // Mapeos para Maestros - VariedadProducto
        CreateMap<Domain.Entities.VariedadProducto, VariedadProductoDto>()
            .ForMember(dest => dest.ProductoNombre, opt => opt.MapFrom(src => 
                src.Producto != null ? src.Producto.Nombre : string.Empty))
            .ForMember(dest => dest.UnidadMedidaNombre, opt => opt.MapFrom(src => 
                src.UnidadMedida != null ? src.UnidadMedida.Nombre : string.Empty));

        // Mapeos para Maestros - Vehiculo
        CreateMap<Domain.Entities.Vehiculo, VehiculoDto>();

        // Mapeos para Ubicaciones
        CreateMap<Ubicacion, UbicacionDto>();

        // Mapeos para Almacén - Productos
        CreateMap<Producto, Miski.Shared.DTOs.Almacen.ProductoDto>()
            .ForMember(dest => dest.CategoriaProductoNombre, opt => opt.MapFrom(src => 
                src.CategoriaProducto != null ? src.CategoriaProducto.Nombre : string.Empty));

        // Mapeos para Compras - Negociaciones
        CreateMap<Negociacion, Miski.Shared.DTOs.Compras.NegociacionDto>()
            .ForMember(dest => dest.ProveedorNombre, opt => opt.MapFrom(src => 
                src.Proveedor != null ? $"{src.Proveedor.Nombres} {src.Proveedor.Apellidos}" : string.Empty))
            .ForMember(dest => dest.ComisionistaNombre, opt => opt.MapFrom(src => 
                src.Comisionista != null ? $"{src.Comisionista.Nombres} {src.Comisionista.Apellidos}" : string.Empty))
            .ForMember(dest => dest.ProductoNombre, opt => opt.MapFrom(src => 
                src.Producto != null ? src.Producto.Nombre : string.Empty))
            .ForMember(dest => dest.AprobadaPorNombre, opt => opt.MapFrom(src => 
                src.AprobadaPorUsuario != null && src.AprobadaPorUsuario.Persona != null 
                    ? $"{src.AprobadaPorUsuario.Persona.Nombres} {src.AprobadaPorUsuario.Persona.Apellidos}" 
                    : string.Empty))
            .ForMember(dest => dest.MontoTotal, opt => opt.MapFrom(src => src.PesoTotal * src.PrecioUnitario));

        // Mapeos para Compras - Lotes
        CreateMap<Lote, Miski.Shared.DTOs.Compras.LoteDto>();
    }
}

// DTOs adicionales que necesitamos
public class ProductoDto
{
    public int Id { get; set; }
    public string Nombre { get; set; } = string.Empty;
    public string Descripcion { get; set; } = string.Empty;
    public string Codigo { get; set; } = string.Empty;
    public decimal PrecioUnitario { get; set; }
    public string UnidadMedida { get; set; } = string.Empty;
    public int StockMinimo { get; set; }
    public int StockActual { get; set; }
    public string Categoria { get; set; } = string.Empty;
    public string Estado { get; set; } = string.Empty;
}

public class PersonaDto
{
    public int Id { get; set; }
    public string Nombre { get; set; } = string.Empty;
    public string Apellidos { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string Telefono { get; set; } = string.Empty;
    public string Documento { get; set; } = string.Empty;
    public string TipoDocumento { get; set; } = string.Empty;
    public string TipoPersona { get; set; } = string.Empty;
    public string TipoDocumentoNombre { get; set; } = string.Empty;
    public string NombreCompleto { get; set; } = string.Empty;
}