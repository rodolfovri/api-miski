using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.Negociaciones.Commands.CreateNegociacion;

public class CreateNegociacionHandler : IRequestHandler<CreateNegociacionCommand, NegociacionDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private const decimal PESO_POR_SACO_DEFAULT = 50m; // Peso por defecto en kg

    public CreateNegociacionHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<NegociacionDto> Handle(CreateNegociacionCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Negociacion;

        // Validar que el comisionista existe
        var comisionista = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(dto.IdComisionista, cancellationToken);
        
        if (comisionista == null)
            throw new NotFoundException("Comisionista", dto.IdComisionista);

        // Validar que la variedad de producto existe si se proporciona
        if (dto.IdVariedadProducto.HasValue)
        {
            var variedadProducto = await _unitOfWork.Repository<VariedadProducto>()
                .GetByIdAsync(dto.IdVariedadProducto.Value, cancellationToken);
            
            if (variedadProducto == null)
                throw new NotFoundException("VariedadProducto", dto.IdVariedadProducto.Value);
        }

        // Calcular PesoTotal: SacosTotales * PesoPorSaco (50 kg)
        decimal? pesoTotal = null;
        if (dto.SacosTotales.HasValue)
        {
            pesoTotal = dto.SacosTotales.Value * PESO_POR_SACO_DEFAULT;
        }

        // Calcular MontoTotalPago: SacosTotales * PrecioUnitario * PesoPorSaco (50 kg)
        decimal? montoTotalPago = null;
        if (dto.SacosTotales.HasValue && dto.PrecioUnitario.HasValue)
        {
            montoTotalPago = dto.SacosTotales.Value * dto.PrecioUnitario.Value * PESO_POR_SACO_DEFAULT;
        }

        // Crear la negociación - PRIMERA ETAPA
        var negociacion = new Negociacion
        {
            IdComisionista = dto.IdComisionista,
            IdVariedadProducto = dto.IdVariedadProducto,
            SacosTotales = dto.SacosTotales,
            TipoCalidad = dto.TipoCalidad,
            PrecioUnitario = dto.PrecioUnitario,
            PesoPorSaco = PESO_POR_SACO_DEFAULT, // Asignar peso por saco por defecto (50 kg)
            PesoTotal = pesoTotal, // Asignar peso total calculado
            MontoTotalPago = montoTotalPago, // Asignar monto total calculado
            Estado = "EN PROCESO",  // Estado inicial automático
            EstadoAprobacionIngeniero = "PENDIENTE",
            FRegistro = DateTime.Now,
            // Otros campos se llenarán en etapas posteriores
            NroDocumentoProveedor = string.Empty,
            FotoDniFrontal = string.Empty,
            FotoDniPosterior = string.Empty,
            PrimeraEvidenciaFoto = string.Empty,
            SegundaEvidenciaFoto = string.Empty,
            TerceraEvidenciaFoto = string.Empty,
            EvidenciaVideo = string.Empty
        };

        await _unitOfWork.Repository<Negociacion>().AddAsync(negociacion, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Cargar relaciones para el DTO
        negociacion.Comisionista = comisionista;

        if (dto.IdVariedadProducto.HasValue)
        {
            negociacion.VariedadProducto = await _unitOfWork.Repository<VariedadProducto>()
                .GetByIdAsync(dto.IdVariedadProducto.Value, cancellationToken);
        }

        return _mapper.Map<NegociacionDto>(negociacion);
    }
}