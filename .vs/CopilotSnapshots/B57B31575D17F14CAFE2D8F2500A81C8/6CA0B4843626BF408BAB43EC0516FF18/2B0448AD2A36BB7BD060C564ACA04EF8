using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;
using Miski.Application.Services;

namespace Miski.Application.Features.Compras.Negociaciones.Commands.CompletarNegociacion;

public class CompletarNegociacionHandler : IRequestHandler<CompletarNegociacionCommand, NegociacionDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly IFileStorageService _fileStorageService;

    public CompletarNegociacionHandler(IUnitOfWork unitOfWork, IMapper mapper, IFileStorageService fileStorageService)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _fileStorageService = fileStorageService;
    }

    public async Task<NegociacionDto> Handle(CompletarNegociacionCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Completar;

        var negociacion = await _unitOfWork.Repository<Negociacion>()
            .GetByIdAsync(dto.IdNegociacion, cancellationToken);

        if (negociacion == null)
            throw new NotFoundException("Negociacion", dto.IdNegociacion);

        // VALIDACIÓN: Debe estar APROBADO por el ingeniero
        if (negociacion.EstadoAprobacionIngeniero != "APROBADO")
        {
            throw new ValidationException("Solo se pueden completar negociaciones aprobadas por el ingeniero");
        }

        // VALIDACIÓN: El estado debe ser APROBADO
        if (negociacion.Estado != "APROBADO")
        {
            throw new ValidationException("Solo se pueden completar negociaciones en estado APROBADO");
        }

        // Validar que todas las fotos y el video estén presentes
        if (dto.FotoDniFrontal == null || dto.FotoDniPosterior == null ||
            dto.PrimeraEvidenciaFoto == null || dto.SegundaEvidenciaFoto == null ||
            dto.TerceraEvidenciaFoto == null || dto.EvidenciaVideo == null)
        {
            throw new ValidationException("Todas las fotos (DNI frontal, DNI posterior, 3 evidencias) y el video son obligatorios");
        }

        // Guardar las fotos en carpeta "negociaciones/dni"
        var fotoDniFrontalUrl = await _fileStorageService.SaveFileAsync(
            dto.FotoDniFrontal, "negociaciones/dni", cancellationToken);
        
        var fotoDniPosteriorUrl = await _fileStorageService.SaveFileAsync(
            dto.FotoDniPosterior, "negociaciones/dni", cancellationToken);

        // Guardar las evidencias en carpeta "negociaciones/evidencias"
        var primeraEvidenciaUrl = await _fileStorageService.SaveFileAsync(
            dto.PrimeraEvidenciaFoto, "negociaciones/evidencias", cancellationToken);
        
        var segundaEvidenciaUrl = await _fileStorageService.SaveFileAsync(
            dto.SegundaEvidenciaFoto, "negociaciones/evidencias", cancellationToken);
        
        var terceraEvidenciaUrl = await _fileStorageService.SaveFileAsync(
            dto.TerceraEvidenciaFoto, "negociaciones/evidencias", cancellationToken);

        // Guardar el video en carpeta "negociaciones/videos"
        var evidenciaVideoUrl = await _fileStorageService.SaveFileAsync(
            dto.EvidenciaVideo, "negociaciones/videos", cancellationToken);

        // Actualizar la negociación
        negociacion.NroDocumentoProveedor = dto.NroDocumentoProveedor;
        negociacion.NroCuentaBancaria = dto.NroCuentaBancaria;
        negociacion.FotoDniFrontal = fotoDniFrontalUrl;
        negociacion.FotoDniPosterior = fotoDniPosteriorUrl;
        negociacion.PrimeraEvidenciaFoto = primeraEvidenciaUrl;
        negociacion.SegundaEvidenciaFoto = segundaEvidenciaUrl;
        negociacion.TerceraEvidenciaFoto = terceraEvidenciaUrl;
        negociacion.EvidenciaVideo = evidenciaVideoUrl;
        
        // Cambiar estado a EN REVISIÓN
        negociacion.Estado = "EN REVISIÓN";
        negociacion.EstadoAprobacionContadora = "PENDIENTE";

        await _unitOfWork.Repository<Negociacion>().UpdateAsync(negociacion, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Cargar relaciones para el DTO
        negociacion.Comisionista = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(negociacion.IdComisionista, cancellationToken) ?? new Persona();

        // Buscar proveedor por documento
        if (!string.IsNullOrEmpty(negociacion.NroDocumentoProveedor))
        {
            var personas = await _unitOfWork.Repository<Persona>().GetAllAsync(cancellationToken);
            negociacion.Proveedor = personas.FirstOrDefault(p => p.NumeroDocumento == negociacion.NroDocumentoProveedor);
        }

        if (negociacion.IdVariedadProducto.HasValue)  // CAMBIADO de IdProducto
        {
            negociacion.VariedadProducto = await _unitOfWork.Repository<VariedadProducto>()
                .GetByIdAsync(negociacion.IdVariedadProducto.Value, cancellationToken);
        }

        if (negociacion.AprobadaPorIngeniero.HasValue)
        {
            negociacion.AprobadaPorUsuarioIngeniero = await _unitOfWork.Repository<Usuario>()
                .GetByIdAsync(negociacion.AprobadaPorIngeniero.Value, cancellationToken);
        }

        return _mapper.Map<NegociacionDto>(negociacion);
    }
}
