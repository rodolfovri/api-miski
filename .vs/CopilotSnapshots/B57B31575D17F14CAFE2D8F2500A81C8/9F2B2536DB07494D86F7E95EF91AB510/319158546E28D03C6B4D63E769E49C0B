using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;

namespace Miski.Application.Features.Compras.Negociaciones.Queries.GetNegociaciones;

public class GetNegociacionesHandler : IRequestHandler<GetNegociacionesQuery, List<NegociacionDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetNegociacionesHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<List<NegociacionDto>> Handle(GetNegociacionesQuery request, CancellationToken cancellationToken)
    {
        var negociaciones = await _unitOfWork.Repository<Negociacion>().GetAllAsync(cancellationToken);
        var personas = await _unitOfWork.Repository<Persona>().GetAllAsync(cancellationToken);
        var productos = await _unitOfWork.Repository<Producto>().GetAllAsync(cancellationToken);
        var usuarios = await _unitOfWork.Repository<Usuario>().GetAllAsync(cancellationToken);

        // Aplicar filtros
        if (request.IdComisionista.HasValue)
        {
            negociaciones = negociaciones.Where(n => n.IdComisionista == request.IdComisionista.Value).ToList();
        }

        if (request.IdProducto.HasValue)
        {
            negociaciones = negociaciones.Where(n => n.IdProducto == request.IdProducto.Value).ToList();
        }

        if (!string.IsNullOrEmpty(request.EstadoAprobacionIngeniero))
        {
            negociaciones = negociaciones.Where(n => n.EstadoAprobacionIngeniero == request.EstadoAprobacionIngeniero).ToList();
        }

        if (!string.IsNullOrEmpty(request.Estado))
        {
            negociaciones = negociaciones.Where(n => n.Estado == request.Estado).ToList();
        }

        // Cargar relaciones
        foreach (var negociacion in negociaciones)
        {
            // Buscar proveedor por documento si existe
            if (!string.IsNullOrEmpty(negociacion.NroDocumentoProveedor))
            {
                negociacion.Proveedor = personas.FirstOrDefault(p => p.NumeroDocumento == negociacion.NroDocumentoProveedor);
            }

            negociacion.Comisionista = personas.FirstOrDefault(p => p.IdPersona == negociacion.IdComisionista) ?? new Persona();

            if (negociacion.IdProducto.HasValue)
            {
                negociacion.Producto = productos.FirstOrDefault(p => p.IdProducto == negociacion.IdProducto.Value);
            }

            if (negociacion.AprobadaPorIngeniero.HasValue)
            {
                negociacion.AprobadaPorUsuarioIngeniero = usuarios.FirstOrDefault(u => u.IdUsuario == negociacion.AprobadaPorIngeniero.Value);
            }

            if (negociacion.AprobadaPorContadora.HasValue)
            {
                negociacion.AprobadaPorUsuarioContadora = usuarios.FirstOrDefault(u => u.IdUsuario == negociacion.AprobadaPorContadora.Value);
            }

            if (negociacion.RechazadoPorIngeniero.HasValue)
            {
                negociacion.RechazadoPorUsuarioIngeniero = usuarios.FirstOrDefault(u => u.IdUsuario == negociacion.RechazadoPorIngeniero.Value);
            }

            if (negociacion.RechazadoPorContadora.HasValue)
            {
                negociacion.RechazadoPorUsuarioContadora = usuarios.FirstOrDefault(u => u.IdUsuario == negociacion.RechazadoPorContadora.Value);
            }
        }

        return negociaciones.Select(n => _mapper.Map<NegociacionDto>(n)).ToList();
    }
}
