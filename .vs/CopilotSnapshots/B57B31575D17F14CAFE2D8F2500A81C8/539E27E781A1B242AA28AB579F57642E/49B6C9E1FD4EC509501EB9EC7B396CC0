using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.Negociaciones.Commands.AprobarNegociacion;

public class AprobarNegociacionHandler : IRequestHandler<AprobarNegociacionCommand, NegociacionDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public AprobarNegociacionHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<NegociacionDto> Handle(AprobarNegociacionCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Aprobacion;

        var negociacion = await _unitOfWork.Repository<Negociacion>()
            .GetByIdAsync(dto.IdNegociacion, cancellationToken);

        if (negociacion == null)
            throw new NotFoundException("Negociacion", dto.IdNegociacion);

        // Validar que la negociación esté pendiente
        if (negociacion.EstadoAprobado != "PENDIENTE")
        {
            throw new ValidationException("La negociación ya ha sido procesada");
        }

        // Validar que el usuario aprobador existe
        var aprobador = await _unitOfWork.Repository<Usuario>()
            .GetByIdAsync(dto.AprobadaPor, cancellationToken);
        
        if (aprobador == null)
            throw new NotFoundException("Usuario aprobador", dto.AprobadaPor);

        // Aprobar la negociación
        negociacion.EstadoAprobado = "APROBADO";
        negociacion.AprobadaPor = dto.AprobadaPor;
        negociacion.FAprobacion = DateTime.Now;
        negociacion.Estado = "ACEPTADA";  // Cambiar estado a ACEPTADA al aprobar

        await _unitOfWork.Repository<Negociacion>().UpdateAsync(negociacion, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Crear automáticamente la Compra cuando se aprueba la negociación
        var compra = new Compra
        {
            IdNegociacion = negociacion.IdNegociacion,
            Estado = "EN PROCESO",
            FRegistro = DateTime.Now,
            Serie = null,
            FEmision = null
        };

        await _unitOfWork.Repository<Compra>().AddAsync(compra, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Cargar relaciones para el DTO
        negociacion.AprobadaPorUsuario = aprobador;
        negociacion.Comisionista = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(negociacion.IdComisionista, cancellationToken) ?? new Persona();
        
        if (negociacion.IdProveedor.HasValue)
        {
            negociacion.Proveedor = await _unitOfWork.Repository<Persona>()
                .GetByIdAsync(negociacion.IdProveedor.Value, cancellationToken);
        }
        
        if (negociacion.IdProducto.HasValue)
        {
            negociacion.Producto = await _unitOfWork.Repository<Producto>()
                .GetByIdAsync(negociacion.IdProducto.Value, cancellationToken);
        }

        return _mapper.Map<NegociacionDto>(negociacion);
    }
}
