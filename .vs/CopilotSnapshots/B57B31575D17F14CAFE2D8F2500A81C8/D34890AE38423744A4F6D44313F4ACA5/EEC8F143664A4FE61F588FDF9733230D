using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.Negociaciones.Commands.CreateNegociacion;

public class CreateNegociacionHandler : IRequestHandler<CreateNegociacionCommand, NegociacionDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public CreateNegociacionHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<NegociacionDto> Handle(CreateNegociacionCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Negociacion;

        // Validar que el comisionista existe
        var comisionista = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(dto.IdComisionista, cancellationToken);
        
        if (comisionista == null)
            throw new NotFoundException("Comisionista", dto.IdComisionista);

        // Validar que el producto existe si se proporciona
        if (dto.IdProducto.HasValue)
        {
            var producto = await _unitOfWork.Repository<Producto>()
                .GetByIdAsync(dto.IdProducto.Value, cancellationToken);
            
            if (producto == null)
                throw new NotFoundException("Producto", dto.IdProducto.Value);
        }

        // Crear la negociación - PRIMERA ETAPA
        var negociacion = new Negociacion
        {
            IdComisionista = dto.IdComisionista,
            IdProducto = dto.IdProducto,  // AGREGADO
            SacosTotales = dto.SacosTotales,
            TipoCalidad = dto.TipoCalidad,
            PrecioUnitario = dto.PrecioUnitario,
            Estado = "EN PROCESO",  // Estado inicial automático
            EstadoAprobacionIngeniero = "PENDIENTE",
            FRegistro = DateTime.Now,
            // Otros campos se llenarán en etapas posteriores
            NroDocumentoProveedor = string.Empty,
            FotoDniFrontal = string.Empty,
            FotoDniPosterior = string.Empty,
            PrimeraEvindenciaFoto = string.Empty,
            SegundaEvindenciaFoto = string.Empty,
            TerceraEvindenciaFoto = string.Empty,
            EvidenciaVideo = string.Empty
        };

        await _unitOfWork.Repository<Negociacion>().AddAsync(negociacion, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Cargar relaciones para el DTO
        negociacion.Comisionista = comisionista;

        if (dto.IdProducto.HasValue)
        {
            negociacion.Producto = await _unitOfWork.Repository<Producto>()
                .GetByIdAsync(dto.IdProducto.Value, cancellationToken);
        }

        return _mapper.Map<NegociacionDto>(negociacion);
    }
}