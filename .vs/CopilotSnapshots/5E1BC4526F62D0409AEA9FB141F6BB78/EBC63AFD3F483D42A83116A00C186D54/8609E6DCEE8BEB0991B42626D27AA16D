using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Maestros;

namespace Miski.Application.Features.Maestros.TipoCambio.Queries.GetTiposCambio;

public class GetTiposCambioHandler : IRequestHandler<GetTiposCambioQuery, IEnumerable<TipoCambioDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetTiposCambioHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<IEnumerable<TipoCambioDto>> Handle(GetTiposCambioQuery request, CancellationToken cancellationToken)
    {
        var tiposCambio = await _unitOfWork.Repository<Domain.Entities.TipoCambio>()
            .GetAllAsync(cancellationToken);

        // Aplicar filtros
        if (request.IdMoneda.HasValue)
        {
            tiposCambio = tiposCambio.Where(tc => tc.IdMoneda == request.IdMoneda.Value);
        }

        if (request.FechaDesde.HasValue)
        {
            tiposCambio = tiposCambio.Where(tc => tc.FRegistro.Date >= request.FechaDesde.Value.Date);
        }

        if (request.FechaHasta.HasValue)
        {
            tiposCambio = tiposCambio.Where(tc => tc.FRegistro.Date <= request.FechaHasta.Value.Date);
        }

        // Ordenar por fecha de registro descendente (más reciente primero)
        var tiposCambioList = tiposCambio.OrderByDescending(tc => tc.FRegistro).ToList();

        // Cargar relaciones
        foreach (var tipoCambio in tiposCambioList)
        {
            tipoCambio.Moneda = await _unitOfWork.Repository<Domain.Entities.Moneda>()
                .GetByIdAsync(tipoCambio.IdMoneda, cancellationToken);

            tipoCambio.Usuario = await _unitOfWork.Repository<Usuario>()
                .GetByIdAsync(tipoCambio.IdUsuario, cancellationToken);
        }

        return _mapper.Map<IEnumerable<TipoCambioDto>>(tiposCambioList);
    }
}
