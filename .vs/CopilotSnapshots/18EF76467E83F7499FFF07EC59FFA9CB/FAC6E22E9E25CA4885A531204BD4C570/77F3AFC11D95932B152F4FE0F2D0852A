using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;

namespace Miski.Application.Features.Compras.CompraVehiculos.Queries.GetCompraVehiculos;

public class GetCompraVehiculosHandler : IRequestHandler<GetCompraVehiculosQuery, IEnumerable<CompraVehiculoDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetCompraVehiculosHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<IEnumerable<CompraVehiculoDto>> Handle(GetCompraVehiculosQuery request, CancellationToken cancellationToken)
    {
        var comprasVehiculos = await _unitOfWork.Repository<CompraVehiculo>()
            .GetAllAsync(cancellationToken);

        // Aplicar filtros
        if (request.IdVehiculo.HasValue)
        {
            comprasVehiculos = comprasVehiculos.Where(cv => cv.IdVehiculo == request.IdVehiculo.Value);
        }

        if (!string.IsNullOrEmpty(request.GuiaRemision))
        {
            comprasVehiculos = comprasVehiculos.Where(cv => 
                cv.GuiaRemision.Contains(request.GuiaRemision, StringComparison.OrdinalIgnoreCase));
        }

        // Cargar relaciones
        var comprasVehiculosList = comprasVehiculos.ToList();
        
        foreach (var compraVehiculo in comprasVehiculosList)
        {
            // Cargar persona
            compraVehiculo.Persona = await _unitOfWork.Repository<Persona>()
                .GetByIdAsync(compraVehiculo.IdPersona, cancellationToken) ?? new Persona();

            // Cargar vehículo
            compraVehiculo.Vehiculo = await _unitOfWork.Repository<Vehiculo>()
                .GetByIdAsync(compraVehiculo.IdVehiculo, cancellationToken) ?? new Vehiculo();

            // Cargar detalles
            var detalles = await _unitOfWork.Repository<CompraVehiculoDetalle>()
                .GetAllAsync(cancellationToken);
            
            compraVehiculo.CompraVehiculoDetalles = detalles
                .Where(d => d.IdCompraVehiculo == compraVehiculo.IdCompraVehiculo)
                .ToList();

            // Cargar compras y lotes en los detalles
            foreach (var detalle in compraVehiculo.CompraVehiculoDetalles)
            {
                detalle.Compra = await _unitOfWork.Repository<Compra>()
                    .GetByIdAsync(detalle.IdCompra, cancellationToken) ?? new Compra();
                
                // Cargar lotes de la compra
                if (detalle.Compra != null)
                {
                    var lotes = await _unitOfWork.Repository<Lote>()
                        .GetAllAsync(cancellationToken);
                    detalle.Compra.Lotes = lotes
                        .Where(l => l.IdCompra == detalle.Compra.IdCompra)
                        .ToList();
                }
            }
        }

        return _mapper.Map<IEnumerable<CompraVehiculoDto>>(comprasVehiculosList);
    }
}
