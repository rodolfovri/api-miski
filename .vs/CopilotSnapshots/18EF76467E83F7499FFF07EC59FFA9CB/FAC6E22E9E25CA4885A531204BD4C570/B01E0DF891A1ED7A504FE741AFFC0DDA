using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Compras;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Compras.CompraVehiculos.Queries.GetCompraVehiculoById;

public class GetCompraVehiculoByIdHandler : IRequestHandler<GetCompraVehiculoByIdQuery, CompraVehiculoDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetCompraVehiculoByIdHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<CompraVehiculoDto> Handle(GetCompraVehiculoByIdQuery request, CancellationToken cancellationToken)
    {
        var compraVehiculo = await _unitOfWork.Repository<CompraVehiculo>()
            .GetByIdAsync(request.Id, cancellationToken);

        if (compraVehiculo == null)
            throw new NotFoundException("CompraVehiculo", request.Id);

        // Cargar persona
        compraVehiculo.Persona = await _unitOfWork.Repository<Persona>()
            .GetByIdAsync(compraVehiculo.IdPersona, cancellationToken) ?? new Persona();

        // Cargar vehículo
        compraVehiculo.Vehiculo = await _unitOfWork.Repository<Vehiculo>()
            .GetByIdAsync(compraVehiculo.IdVehiculo, cancellationToken) ?? new Vehiculo();

        // Cargar detalles
        var detalles = await _unitOfWork.Repository<CompraVehiculoDetalle>()
            .GetAllAsync(cancellationToken);
        
        compraVehiculo.CompraVehiculoDetalles = detalles
            .Where(d => d.IdCompraVehiculo == compraVehiculo.IdCompraVehiculo)
            .ToList();

        // Cargar compras en los detalles
        foreach (var detalle in compraVehiculo.CompraVehiculoDetalles)
        {
            detalle.Compra = await _unitOfWork.Repository<Compra>()
                .GetByIdAsync(detalle.IdCompra, cancellationToken) ?? new Compra();
            
            // Cargar lotes de la compra
            if (detalle.Compra != null)
            {
                var lotes = await _unitOfWork.Repository<Lote>()
                    .GetAllAsync(cancellationToken);
                detalle.Compra.Lotes = lotes
                    .Where(l => l.IdCompra == detalle.Compra.IdCompra)
                    .ToList();
            }
        }

        return _mapper.Map<CompraVehiculoDto>(compraVehiculo);
    }
}
