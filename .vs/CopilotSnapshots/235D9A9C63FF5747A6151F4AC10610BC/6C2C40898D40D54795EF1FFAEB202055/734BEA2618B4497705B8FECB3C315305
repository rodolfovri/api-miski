using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Ubicaciones;
using Miski.Shared.Exceptions;
using Miski.Application.Services;

namespace Miski.Application.Features.Ubicaciones.Commands.CreateUbicacion;

public class CreateUbicacionHandler : IRequestHandler<CreateUbicacionCommand, UbicacionDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly IFileStorageService _fileStorageService;

    public CreateUbicacionHandler(IUnitOfWork unitOfWork, IMapper mapper, IFileStorageService fileStorageService)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _fileStorageService = fileStorageService;
    }

    public async Task<UbicacionDto> Handle(CreateUbicacionCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Ubicacion;

        // Verificar que el usuario existe
        var usuario = await _unitOfWork.Repository<Usuario>()
            .GetByIdAsync(dto.IdUsuario, cancellationToken);

        if (usuario == null)
            throw new NotFoundException("Usuario", dto.IdUsuario);

        // Guardar el PDF si se proporciona (opcional)
        string? comprobantePdfUrl = null;
        if (dto.ComprobantePdf != null)
        {
            comprobantePdfUrl = await _fileStorageService.SaveFileAsync(
                dto.ComprobantePdf, 
                "ubicaciones/comprobantes", 
                cancellationToken);
        }

        // Crear la nueva ubicación
        var nuevaUbicacion = new Ubicacion
        {
            IdUsuario = dto.IdUsuario,
            CodigoSenasa = NormalizeString(dto.CodigoSenasa),
            Nombre = dto.Nombre,
            RazonSocial = dto.RazonSocial,
            NumeroRuc = NormalizeString(dto.NumeroRuc),
            Direccion = dto.Direccion,
            DomicilioLegal = NormalizeString(dto.DomicilioLegal),
            GiroEstablecimiento = NormalizeString(dto.GiroEstablecimiento),
            ComprobantePdf = comprobantePdfUrl,
            Tipo = NormalizeString(dto.Tipo),
            Estado = dto.Estado,
            FRegistro = DateTime.Now
        };

        await _unitOfWork.Repository<Ubicacion>().AddAsync(nuevaUbicacion, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Cargar el usuario para el DTO
        nuevaUbicacion.Usuario = usuario;

        return _mapper.Map<UbicacionDto>(nuevaUbicacion);
    }

    // Método helper para normalizar strings: convierte "", "null", "NULL" a null
    private static string? NormalizeString(string? value)
    {
        if (string.IsNullOrWhiteSpace(value) || 
            value.Equals("null", StringComparison.OrdinalIgnoreCase))
        {
            return null;
        }
        return value;
    }
}