using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Miski.Application.Features.Almacen.Productos.Commands.CreateProducto;
using Miski.Application.Features.Almacen.Productos.Commands.UpdateProducto;
using Miski.Application.Features.Almacen.Productos.Commands.DeleteProducto;
using Miski.Application.Features.Almacen.Productos.Queries.GetProductos;
using Miski.Application.Features.Almacen.Productos.Queries.GetProductoById;
using Miski.Shared.DTOs.Base;
using Miski.Shared.DTOs.Almacen;

namespace Miski.Api.Controllers.Almacen;

[ApiController]
[Route("api/almacen/productos")]
[Tags("Almacén")]
[Authorize]
public class ProductosController : ControllerBase
{
    private readonly IMediator _mediator;

    public ProductosController(IMediator mediator)
    {
        _mediator = mediator;
    }

    /// <summary>
    /// Obtiene todos los productos
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<ApiResponse<IEnumerable<ProductoDto>>>> GetProductos(
        [FromQuery] string? nombre = null,
        [FromQuery] string? codigo = null,
        [FromQuery] int? idCategoriaProducto = null,
        [FromQuery] string? estado = null,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var query = new GetProductosQuery
            {
                Nombre = nombre,
                Codigo = codigo,
                IdCategoriaProducto = idCategoriaProducto,
                Estado = estado
            };

            var result = await _mediator.Send(query, cancellationToken);

            return Ok(ApiResponse<IEnumerable<ProductoDto>>.SuccessResult(
                result,
                "Productos obtenidos exitosamente"
            ));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<IEnumerable<ProductoDto>>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Obtiene un producto por ID
    /// </summary>
    [HttpGet("{id}")]
    public async Task<ActionResult<ApiResponse<ProductoDto>>> GetProductoById(
        int id,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var query = new GetProductoByIdQuery(id);
            var result = await _mediator.Send(query, cancellationToken);

            return Ok(ApiResponse<ProductoDto>.SuccessResult(
                result,
                "Producto obtenido exitosamente"
            ));
        }
        catch (KeyNotFoundException)
        {
            return NotFound(ApiResponse<ProductoDto>.ErrorResult(
                "Producto no encontrado",
                $"No se encontró un producto con ID {id}"
            ));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<ProductoDto>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Crea un nuevo producto
    /// </summary>
    [HttpPost]
    public async Task<ActionResult<ApiResponse<ProductoDto>>> CreateProducto(
        [FromBody] CreateProductoDto request,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var command = new CreateProductoCommand
            {
                IdCategoriaProducto = request.IdCategoriaProducto,
                IdUnidadMedida = request.IdUnidadMedida,
                Codigo = request.Codigo,
                Nombre = request.Nombre,
                Descripcion = request.Descripcion,
                Estado = request.Estado
            };

            var result = await _mediator.Send(command, cancellationToken);

            return CreatedAtAction(
                nameof(GetProductoById),
                new { id = result.IdProducto },
                ApiResponse<ProductoDto>.SuccessResult(
                    result,
                    "Producto creado exitosamente"
                )
            );
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<ProductoDto>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Actualiza un producto
    /// </summary>
    [HttpPut("{id}")]
    public async Task<ActionResult<ApiResponse<ProductoDto>>> UpdateProducto(
        int id,
        [FromBody] UpdateProductoDto request,
        CancellationToken cancellationToken = default)
    {
        try
        {
            if (id != request.IdProducto)
            {
                return BadRequest(ApiResponse<ProductoDto>.ErrorResult(
                    "ID de producto no coincide",
                    "El ID del parámetro no coincide con el ID del cuerpo de la solicitud"
                ));
            }

            var command = new UpdateProductoCommand
            {
                IdProducto = request.IdProducto,
                IdCategoriaProducto = request.IdCategoriaProducto,
                IdUnidadMedida = request.IdUnidadMedida,
                Codigo = request.Codigo,
                Nombre = request.Nombre,
                Descripcion = request.Descripcion,
                Estado = request.Estado
            };

            var result = await _mediator.Send(command, cancellationToken);

            return Ok(ApiResponse<ProductoDto>.SuccessResult(
                result,
                "Producto actualizado exitosamente"
            ));
        }
        catch (KeyNotFoundException)
        {
            return NotFound(ApiResponse<ProductoDto>.ErrorResult(
                "Producto no encontrado",
                $"No se encontró un producto con ID {id}"
            ));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse<ProductoDto>.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }

    /// <summary>
    /// Elimina un producto
    /// </summary>
    [HttpDelete("{id}")]
    public async Task<ActionResult<ApiResponse>> DeleteProducto(
        int id,
        CancellationToken cancellationToken = default)
    {
        try
        {
            var command = new DeleteProductoCommand(id);
            await _mediator.Send(command, cancellationToken);

            return Ok(ApiResponse.SuccessResult("Producto eliminado exitosamente"));
        }
        catch (KeyNotFoundException)
        {
            return NotFound(ApiResponse.ErrorResult(
                "Producto no encontrado",
                $"No se encontró un producto con ID {id}"
            ));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ApiResponse.ErrorResult(
                "Error interno del servidor",
                ex.Message
            ));
        }
    }
}
