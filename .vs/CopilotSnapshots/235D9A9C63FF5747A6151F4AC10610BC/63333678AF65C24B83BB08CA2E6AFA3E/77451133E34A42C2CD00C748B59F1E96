using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Almacen;
using Miski.Shared.Exceptions;

namespace Miski.Application.Features.Almacen.Productos.Commands.CreateProducto;

public class CreateProductoHandler : IRequestHandler<CreateProductoCommand, ProductoDto>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public CreateProductoHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<ProductoDto> Handle(CreateProductoCommand request, CancellationToken cancellationToken)
    {
        var dto = request.Producto;

        // Validar que la categoría existe
        var categoria = await _unitOfWork.Repository<CategoriaProducto>()
            .GetByIdAsync(dto.IdCategoriaProducto, cancellationToken);
        
        if (categoria == null)
            throw new NotFoundException("CategoriaProducto", dto.IdCategoriaProducto);

        // Validar que la unidad de medida existe
        var unidadMedida = await _unitOfWork.Repository<UnidadMedida>()
            .GetByIdAsync(dto.IdUnidadMedida, cancellationToken);
        
        if (unidadMedida == null)
            throw new NotFoundException("UnidadMedida", dto.IdUnidadMedida);

        // Validar que el código no exista
        var productos = await _unitOfWork.Repository<Producto>().GetAllAsync(cancellationToken);
        if (productos.Any(p => p.Codigo == dto.Codigo))
            throw new ValidationException($"Ya existe un producto con el código {dto.Codigo}");

        var producto = new Producto
        {
            IdCategoriaProducto = dto.IdCategoriaProducto,
            IdUnidadMedida = dto.IdUnidadMedida,
            Codigo = dto.Codigo,
            Nombre = dto.Nombre,
            Descripcion = dto.Descripcion,
            Estado = dto.Estado,
            FRegistro = DateTime.Now
        };

        await _unitOfWork.Repository<Producto>().AddAsync(producto, cancellationToken);
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        // Cargar relaciones para el DTO
        producto.CategoriaProducto = categoria;
        producto.UnidadMedida = unidadMedida;

        return _mapper.Map<ProductoDto>(producto);
    }
}
