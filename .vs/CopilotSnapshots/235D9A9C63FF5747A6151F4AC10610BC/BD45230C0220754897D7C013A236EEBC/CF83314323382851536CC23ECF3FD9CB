using MediatR;
using AutoMapper;
using Miski.Domain.Contracts;
using Miski.Domain.Entities;
using Miski.Shared.DTOs.Ubicaciones;

namespace Miski.Application.Features.Ubicaciones.Queries.GetUbicaciones;

public class GetUbicacionesHandler : IRequestHandler<GetUbicacionesQuery, List<UbicacionDto>>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public GetUbicacionesHandler(IUnitOfWork unitOfWork, IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

    public async Task<List<UbicacionDto>> Handle(GetUbicacionesQuery request, CancellationToken cancellationToken)
    {
        var ubicaciones = await _unitOfWork.Repository<Ubicacion>().GetAllAsync(cancellationToken);

        // Aplicar filtros
        if (!string.IsNullOrEmpty(request.Nombre))
        {
            ubicaciones = ubicaciones.Where(u =>
                u.Nombre.Contains(request.Nombre, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrEmpty(request.Tipo))
        {
            ubicaciones = ubicaciones.Where(u => u.Tipo == request.Tipo).ToList();
        }

        if (!string.IsNullOrEmpty(request.Estado))
        {
            ubicaciones = ubicaciones.Where(u => u.Estado == request.Estado).ToList();
        }

        if (request.IdUsuario.HasValue)
        {
            ubicaciones = ubicaciones.Where(u => u.IdUsuario == request.IdUsuario.Value).ToList();
        }

        var ubicacionesDto = ubicaciones.Select(u =>
        {
            var dto = _mapper.Map<UbicacionDto>(u);
            dto.UsuarioNombre = null; // No incluir el nombre de usuario en el listado
            return dto;
        }).ToList();

        return ubicacionesDto;
    }
}