using Microsoft.EntityFrameworkCore;
using Miski.Domain.Contracts.Repositories;
using Miski.Domain.Entities;
using Miski.Infrastructure.Data;

namespace Miski.Infrastructure.Repositories;

public class NegociacionRepository : Repository<Negociacion>, INegociacionRepository
{
    public NegociacionRepository(MiskiDbContext context) : base(context)
    {
    }

    public async Task<IEnumerable<Negociacion>> GetByPersonaIdAsync(int personaId, CancellationToken cancellationToken = default)
    {
        return await _dbSet
            .Include(n => n.Persona)
            .Include(n => n.Detalles)
                .ThenInclude(d => d.Producto)
            .Where(n => n.PersonaId == personaId && n.IsActive)
            .OrderByDescending(n => n.CreatedAt)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Negociacion>> GetByEstadoAsync(EstadoNegociacion estado, CancellationToken cancellationToken = default)
    {
        return await _dbSet
            .Include(n => n.Persona)
            .Where(n => n.Estado == estado && n.IsActive)
            .OrderByDescending(n => n.CreatedAt)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Negociacion>> GetPendientesLlegadaAsync(CancellationToken cancellationToken = default)
    {
        return await _dbSet
            .Include(n => n.Persona)
            .Include(n => n.Detalles)
                .ThenInclude(d => d.Producto)
            .Where(n => n.Estado == EstadoNegociacion.EnTransito && n.IsActive)
            .OrderBy(n => n.FechaNegociacion)
            .ToListAsync(cancellationToken);
    }

    public async Task<Negociacion?> GetWithDetallesAsync(int id, CancellationToken cancellationToken = default)
    {
        return await _dbSet
            .Include(n => n.Persona)
            .Include(n => n.Detalles)
                .ThenInclude(d => d.Producto)
            .FirstOrDefaultAsync(n => n.Id == id && n.IsActive, cancellationToken);
    }

    public override async Task<IEnumerable<Negociacion>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await _dbSet
            .Include(n => n.Persona)
            .Where(n => n.IsActive)
            .OrderByDescending(n => n.CreatedAt)
            .ToListAsync(cancellationToken);
    }
}