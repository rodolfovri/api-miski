using FluentValidation;

namespace Miski.Application.Features.Negociaciones.Commands.CreateNegociacion;

public class CreateNegociacionValidator : AbstractValidator<CreateNegociacionCommand>
{
    public CreateNegociacionValidator()
    {
        RuleFor(x => x.Negociacion.IdComisionista)
            .GreaterThan(0)
            .WithMessage("IdComisionista debe ser mayor que 0");

        RuleFor(x => x.Negociacion.Fecha)
            .NotEmpty()
            .WithMessage("Fecha es requerida")
            .LessThanOrEqualTo(DateTime.Now.AddDays(1))
            .WithMessage("La fecha no puede ser futura");

        RuleFor(x => x.Negociacion.PesoTotal)
            .GreaterThan(0)
            .WithMessage("Peso total debe ser mayor que 0");

        RuleFor(x => x.Negociacion.SacosTotales)
            .GreaterThan(0)
            .WithMessage("Sacos totales debe ser mayor que 0");

        RuleFor(x => x.Negociacion.PrecioUnitario)
            .GreaterThan(0)
            .WithMessage("Precio unitario debe ser mayor que 0");

        RuleFor(x => x.Negociacion.NroCuentaRuc)
            .NotEmpty()
            .WithMessage("Número de cuenta/RUC es requerido")
            .MaximumLength(20)
            .WithMessage("Número de cuenta/RUC no puede exceder 20 caracteres");

        RuleFor(x => x.Negociacion.FotoCalidadProducto)
            .NotEmpty()
            .WithMessage("Foto de calidad del producto es requerida");

        RuleFor(x => x.Negociacion.FotoDniFrontal)
            .NotEmpty()
            .WithMessage("Foto frontal del DNI es requerida");

        RuleFor(x => x.Negociacion.FotoDniPosterior)
            .NotEmpty()
            .WithMessage("Foto posterior del DNI es requerida");

        When(x => x.Negociacion.IdProveedor.HasValue, () =>
        {
            RuleFor(x => x.Negociacion.IdProveedor.Value)
                .GreaterThan(0)
                .WithMessage("IdProveedor debe ser mayor que 0");
        });

        When(x => x.Negociacion.IdProducto.HasValue, () =>
        {
            RuleFor(x => x.Negociacion.IdProducto.Value)
                .GreaterThan(0)
                .WithMessage("IdProducto debe ser mayor que 0");
        });
    }
}